#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
🗺️ 強化版ジオコーディングサービス
文豪地図プロジェクト専用 - 日本文学地名対応版

Features:
- 文学作品に頻出する地名の高精度対応
- 歴史的地名の現代座標マッピング
- 複合地名（都道府県+市区町村）対応
- 青空文庫クリーンテキスト対応
"""

from dataclasses import dataclass
from typing import Optional, Dict, Tuple
import re
import logging

logger = logging.getLogger(__name__)

@dataclass
class GeocodingResult:
    """ジオコーディング結果"""
    place_name: str
    latitude: float
    longitude: float
    confidence: float
    source: str
    prefecture: Optional[str] = None
    city: Optional[str] = None

class EnhancedGeocodingService:
    """強化版ジオコーディングサービス"""
    
    def __init__(self):
        # 都道府県座標データベース
        self.prefecture_coordinates = {
            "北海道": (43.2203, 142.8635, 0.95),
            "青森": (40.5606, 140.6740, 0.95), "青森県": (40.5606, 140.6740, 0.95),
            "岩手": (39.7036, 141.1527, 0.95), "岩手県": (39.7036, 141.1527, 0.95),
            "宮城": (38.7472, 140.9739, 0.95), "宮城県": (38.7472, 140.9739, 0.95),
            "秋田": (39.2180, 140.1024, 0.95), "秋田県": (39.2180, 140.1024, 0.95),
            "山形": (38.6503, 140.3389, 0.95), "山形県": (38.6503, 140.3389, 0.95),
            "福島": (37.4000, 140.2220, 0.95), "福島県": (37.4000, 140.2220, 0.95),
            "茨城": (36.3418, 140.4469, 0.95), "茨城県": (36.3418, 140.4469, 0.95),
            "栃木": (36.5658, 139.8835, 0.95), "栃木県": (36.5658, 139.8835, 0.95),
            "群馬": (36.3914, 139.0606, 0.95), "群馬県": (36.3914, 139.0606, 0.95),
            "埼玉": (35.8617, 139.6455, 0.95), "埼玉県": (35.8617, 139.6455, 0.95),
            "千葉": (35.6074, 140.1065, 0.95), "千葉県": (35.6074, 140.1065, 0.95),
            "東京": (35.6762, 139.6503, 0.98), "東京都": (35.6762, 139.6503, 0.98),
            "神奈川": (35.4478, 139.6425, 0.95), "神奈川県": (35.4478, 139.6425, 0.95),
            "新潟": (37.5024, 138.9109, 0.95), "新潟県": (37.5024, 138.9109, 0.95),
            "富山": (36.6959, 137.2119, 0.95), "富山県": (36.6959, 137.2119, 0.95),
            "石川": (36.2948, 136.6257, 0.95), "石川県": (36.2948, 136.6257, 0.95),
            "福井": (35.9438, 136.1881, 0.95), "福井県": (35.9438, 136.1881, 0.95),
            "山梨": (35.6635, 138.5684, 0.95), "山梨県": (35.6635, 138.5684, 0.95),
            "長野": (36.2048, 138.0518, 0.95), "長野県": (36.2048, 138.0518, 0.95),
            "岐阜": (35.4437, 136.7624, 0.95), "岐阜県": (35.4437, 136.7624, 0.95),
            "静岡": (34.9756, 138.3827, 0.95), "静岡県": (34.9756, 138.3827, 0.95),
            "愛知": (35.1815, 136.9066, 0.95), "愛知県": (35.1815, 136.9066, 0.95),
            "三重": (34.7309, 136.5085, 0.95), "三重県": (34.7309, 136.5085, 0.95),
            "滋賀": (35.2042, 135.8694, 0.95), "滋賀県": (35.2042, 135.8694, 0.95),
            "京都": (35.0116, 135.7681, 0.98), "京都府": (35.0116, 135.7681, 0.98),
            "大阪": (34.6937, 135.5023, 0.98), "大阪府": (34.6937, 135.5023, 0.98),
            "兵庫": (34.8406, 134.6956, 0.95), "兵庫県": (34.8406, 134.6956, 0.95),
            "奈良": (34.6851, 135.8325, 0.95), "奈良県": (34.6851, 135.8325, 0.95),
            "和歌山": (34.2261, 135.1675, 0.95), "和歌山県": (34.2261, 135.1675, 0.95),
            "鳥取": (35.3838, 134.2356, 0.95), "鳥取県": (35.3838, 134.2356, 0.95),
            "島根": (35.4723, 133.0505, 0.95), "島根県": (35.4723, 133.0505, 0.95),
            "岡山": (34.7549, 133.8229, 0.95), "岡山県": (34.7549, 133.8229, 0.95),
            "広島": (34.3963, 132.4596, 0.95), "広島県": (34.3963, 132.4596, 0.95),
            "山口": (34.3415, 131.4763, 0.95), "山口県": (34.3415, 131.4763, 0.95),
            "徳島": (34.0658, 134.5593, 0.95), "徳島県": (34.0658, 134.5593, 0.95),
            "香川": (34.3401, 134.0431, 0.95), "香川県": (34.3401, 134.0431, 0.95),
            "愛媛": (33.5904, 132.9270, 0.95), "愛媛県": (33.5904, 132.9270, 0.95),
            "高知": (33.4473, 133.5319, 0.95), "高知県": (33.4473, 133.5319, 0.95),
            "福岡": (33.6064, 130.4181, 0.95), "福岡県": (33.6064, 130.4181, 0.95),
            "佐賀": (33.2494, 130.2989, 0.95), "佐賀県": (33.2494, 130.2989, 0.95),
            "長崎": (32.7503, 129.8681, 0.95), "長崎県": (32.7503, 129.8681, 0.95),
            "熊本": (32.7898, 130.7417, 0.95), "熊本県": (32.7898, 130.7417, 0.95),
            "大分": (33.2382, 131.6126, 0.95), "大分県": (33.2382, 131.6126, 0.95),
            "宮崎": (31.9110, 131.4233, 0.95), "宮崎県": (31.9110, 131.4233, 0.95),
            "鹿児島": (31.5601, 130.5581, 0.95), "鹿児島県": (31.5601, 130.5581, 0.95),
            "沖縄": (26.2124, 127.6792, 0.95), "沖縄県": (26.2124, 127.6792, 0.95),
        }
        
        # 主要都市座標データベース
        self.city_coordinates = {
            # 文学作品によく登場する都市
            "東京": (35.6762, 139.6503, 0.98, "東京都"),
            "江戸": (35.6762, 139.6503, 0.92, "東京都"),  # 歴史的名称
            "京都": (35.0116, 135.7681, 0.98, "京都府"),
            "平安京": (35.0116, 135.7681, 0.90, "京都府"),  # 歴史的名称
            "大阪": (34.6937, 135.5023, 0.98, "大阪府"),
            "大坂": (34.6937, 135.5023, 0.92, "大阪府"),  # 歴史的名称
            "名古屋": (35.1815, 136.9066, 0.95, "愛知県"),
            "横浜": (35.4478, 139.6425, 0.95, "神奈川県"),
            "神戸": (34.6901, 135.1956, 0.95, "兵庫県"),
            "札幌": (43.0642, 141.3469, 0.95, "北海道"),
            "仙台": (38.2682, 140.8694, 0.95, "宮城県"),
            "広島": (34.3963, 132.4596, 0.95, "広島県"),
            "福岡": (33.5904, 130.4017, 0.95, "福岡県"),
            
            # 文学作品の舞台となった都市
            "松山": (33.8416, 132.7658, 0.95, "愛媛県"),  # 坊っちゃん
            "道後": (33.8484, 132.7864, 0.90, "愛媛県"),  # 道後温泉
            "小倉": (33.8834, 130.8751, 0.90, "福岡県"),
            "新橋": (35.6657, 139.7588, 0.90, "東京都"),
            "浅草": (35.7148, 139.7967, 0.90, "東京都"),
            "上野": (35.7180, 139.7730, 0.90, "東京都"),
            "銀座": (35.6724, 139.7709, 0.90, "東京都"),
            "渋谷": (35.6598, 139.7006, 0.90, "東京都"),
            "新宿": (35.6896, 139.6917, 0.90, "東京都"),
            "池袋": (35.7295, 139.7109, 0.90, "東京都"),
            "品川": (35.6284, 139.7387, 0.90, "東京都"),
            
            # 地方都市
            "金沢": (36.5944, 136.6256, 0.95, "石川県"),
            "長野": (36.6486, 138.1947, 0.95, "長野県"),
            "静岡": (34.9756, 138.3827, 0.95, "静岡県"),
            "甲府": (35.6635, 138.5684, 0.95, "山梨県"),
            "津和野": (34.4605, 131.7730, 0.92, "島根県"),  # 津和野町
            "萩": (34.4126, 131.4005, 0.90, "山口県"),
            "倉敷": (34.5966, 133.7722, 0.90, "岡山県"),
            "尾道": (34.4090, 133.2044, 0.90, "広島県"),
            "下関": (33.9517, 130.9219, 0.90, "山口県"),
            "別府": (33.2849, 131.4911, 0.90, "大分県"),
            "熱海": (35.0954, 139.0738, 0.90, "静岡県"),
            "鎌倉": (35.3194, 139.5467, 0.92, "神奈川県"),
            "奈良": (34.6851, 135.8325, 0.95, "奈良県"),
            "和歌山": (34.2261, 135.1675, 0.95, "和歌山県"),
            
            # 特別区・政令指定都市の区
            "千代田区": (35.6940, 139.7536, 0.95, "東京都"),
            "中央区": (35.6704, 139.7744, 0.95, "東京都"),
            "港区": (35.6581, 139.7414, 0.95, "東京都"),
            "新宿区": (35.6896, 139.6917, 0.95, "東京都"),
            "文京区": (35.7081, 139.7519, 0.95, "東京都"),
            "台東区": (35.7105, 139.7794, 0.95, "東京都"),
            "墨田区": (35.7100, 139.8016, 0.95, "東京都"),
            "江東区": (35.6730, 139.8171, 0.95, "東京都"),
            "品川区": (35.6091, 139.7298, 0.95, "東京都"),
            "目黒区": (35.6332, 139.7006, 0.95, "東京都"),
            "大田区": (35.5608, 139.7164, 0.95, "東京都"),
            "世田谷区": (35.6464, 139.6534, 0.95, "東京都"),
            "渋谷区": (35.6598, 139.7006, 0.95, "東京都"),
            "中野区": (35.7090, 139.6653, 0.95, "東京都"),
            "杉並区": (35.6993, 139.6369, 0.95, "東京都"),
            "豊島区": (35.7295, 139.7109, 0.95, "東京都"),
            "北区": (35.7536, 139.7340, 0.95, "東京都"),
            "荒川区": (35.7362, 139.7830, 0.95, "東京都"),
            "板橋区": (35.7515, 139.7094, 0.95, "東京都"),
            "練馬区": (35.7353, 139.6521, 0.95, "東京都"),
            "足立区": (35.7747, 139.8048, 0.95, "東京都"),
            "葛飾区": (35.7448, 139.8481, 0.95, "東京都"),
            "江戸川区": (35.7065, 139.8683, 0.95, "東京都"),
        }
        
        # 歴史的地名マッピング
        self.historical_places = {
            "武蔵": (35.6762, 139.6503, 0.85, "東京都"),  # 武蔵国 → 東京
            "山城": (35.0116, 135.7681, 0.85, "京都府"),  # 山城国 → 京都
            "摂津": (34.6937, 135.5023, 0.85, "大阪府"),  # 摂津国 → 大阪
            "河内": (34.6286, 135.6020, 0.85, "大阪府"),  # 河内国 → 大阪東部
            "和泉": (34.4845, 135.4009, 0.85, "大阪府"),  # 和泉国 → 大阪南部
            "越後": (37.5024, 138.9109, 0.85, "新潟県"),  # 越後国 → 新潟
            "越前": (35.9438, 136.1881, 0.85, "福井県"),  # 越前国 → 福井
            "加賀": (36.2948, 136.6257, 0.85, "石川県"),  # 加賀国 → 石川
            "能登": (37.2304, 136.8990, 0.85, "石川県"),  # 能登国 → 石川北部
            "信濃": (36.2048, 138.0518, 0.85, "長野県"),  # 信濃国 → 長野
            "甲斐": (35.6635, 138.5684, 0.85, "山梨県"),  # 甲斐国 → 山梨
            "相模": (35.4478, 139.6425, 0.85, "神奈川県"),  # 相模国 → 神奈川
            "安房": (35.1147, 139.8749, 0.85, "千葉県"),  # 安房国 → 千葉南部
            "上総": (35.4483, 140.2067, 0.85, "千葉県"),  # 上総国 → 千葉中部
            "下総": (35.7723, 140.0931, 0.85, "千葉県"),  # 下総国 → 千葉北部
            "常陸": (36.3418, 140.4469, 0.85, "茨城県"),  # 常陸国 → 茨城
            "下野": (36.5658, 139.8835, 0.85, "栃木県"),  # 下野国 → 栃木
            "上野": (36.3914, 139.0606, 0.85, "群馬県"),  # 上野国 → 群馬
            "丹波": (35.0733, 135.4429, 0.85, "京都府"),  # 丹波国 → 京都・兵庫
            "丹後": (35.5400, 135.0869, 0.85, "京都府"),  # 丹後国 → 京都北部
            "但馬": (35.2326, 134.7673, 0.85, "兵庫県"),  # 但馬国 → 兵庫北部
            "因幡": (35.3838, 134.2356, 0.85, "鳥取県"),  # 因幡国 → 鳥取東部
            "伯耆": (35.4291, 133.3309, 0.85, "鳥取県"),  # 伯耆国 → 鳥取西部
            "出雲": (35.3676, 132.7498, 0.85, "島根県"),  # 出雲国 → 島根東部
            "石見": (34.6702, 131.8378, 0.85, "島根県"),  # 石見国 → 島根西部
            "隠岐": (36.2094, 133.3250, 0.85, "島根県"),  # 隠岐国 → 隠岐諸島
            "備前": (34.6618, 134.0048, 0.85, "岡山県"),  # 備前国 → 岡山東部
            "備中": (34.5966, 133.7722, 0.85, "岡山県"),  # 備中国 → 岡山西部
            "備後": (34.4900, 133.1895, 0.85, "広島県"),  # 備後国 → 広島東部
            "安芸": (34.3963, 132.4596, 0.85, "広島県"),  # 安芸国 → 広島西部
            "周防": (34.1462, 131.4704, 0.85, "山口県"),  # 周防国 → 山口東部
            "長門": (34.3778, 131.2069, 0.85, "山口県"),  # 長門国 → 山口西部
        }
    
    def parse_compound_place(self, place_name: str) -> Tuple[Optional[str], Optional[str]]:
        """複合地名の解析（都道府県+市区町村）"""
        # パターン1: 県名+市区町村名
        prefecture_pattern = r'(.*?[都道府県])(.*)'
        match = re.match(prefecture_pattern, place_name)
        if match:
            prefecture = match.group(1)
            city = match.group(2)
            return prefecture, city
        
        return None, None
    
    def geocode_place_sync(self, place_name: str) -> Optional[GeocodingResult]:
        """地名をジオコーディング（同期版）"""
        logger.info(f"🗺️ Geocoding: {place_name}")
        
        # 1. 完全一致検索（都市データベース優先）
        if place_name in self.city_coordinates:
            lat, lng, confidence, prefecture = self.city_coordinates[place_name]
            result = GeocodingResult(
                place_name=place_name,
                latitude=lat,
                longitude=lng,
                confidence=confidence,
                source="city_database",
                prefecture=prefecture,
                city=place_name
            )
            logger.info(f"   ✅ 都市DB: ({lat:.4f}, {lng:.4f}) 信頼度:{confidence:.2f}")
            return result
        
        # 2. 都道府県検索
        if place_name in self.prefecture_coordinates:
            lat, lng, confidence = self.prefecture_coordinates[place_name]
            result = GeocodingResult(
                place_name=place_name,
                latitude=lat,
                longitude=lng,
                confidence=confidence,
                source="prefecture_database",
                prefecture=place_name
            )
            logger.info(f"   ✅ 都道府県DB: ({lat:.4f}, {lng:.4f}) 信頼度:{confidence:.2f}")
            return result
        
        # 3. 歴史的地名検索
        if place_name in self.historical_places:
            lat, lng, confidence, modern_name = self.historical_places[place_name]
            result = GeocodingResult(
                place_name=place_name,
                latitude=lat,
                longitude=lng,
                confidence=confidence,
                source="historical_database",
                prefecture=modern_name,
                city=place_name
            )
            logger.info(f"   ✅ 歴史地名DB: ({lat:.4f}, {lng:.4f}) 信頼度:{confidence:.2f}")
            return result
        
        # 4. 複合地名解析
        prefecture, city = self.parse_compound_place(place_name)
        if prefecture and city:
            # 都道府県座標をベースにする
            if prefecture in self.prefecture_coordinates:
                lat, lng, confidence = self.prefecture_coordinates[prefecture]
                # 市区町村が特定できれば座標調整
                if city in self.city_coordinates:
                    city_lat, city_lng, city_conf, _ = self.city_coordinates[city]
                    lat, lng, confidence = city_lat, city_lng, max(confidence, city_conf)
                
                result = GeocodingResult(
                    place_name=place_name,
                    latitude=lat,
                    longitude=lng,
                    confidence=confidence * 0.9,  # 複合地名は信頼度少し下げる
                    source="compound_analysis",
                    prefecture=prefecture,
                    city=city
                )
                logger.info(f"   ✅ 複合地名: ({lat:.4f}, {lng:.4f}) 信頼度:{confidence*0.9:.2f}")
                return result
        
        # 5. 部分マッチング検索
        for known_name, (lat, lng, confidence, prefecture) in self.city_coordinates.items():
            if known_name in place_name or place_name in known_name:
                result = GeocodingResult(
                    place_name=place_name,
                    latitude=lat,
                    longitude=lng,
                    confidence=confidence * 0.7,  # 部分マッチは信頼度大幅に下げる
                    source="partial_match",
                    prefecture=prefecture,
                    city=known_name
                )
                logger.info(f"   ✅ 部分マッチ: ({lat:.4f}, {lng:.4f}) 信頼度:{confidence*0.7:.2f}")
                return result
        
        logger.warning(f"   ❌ Geocoding失敗: {place_name}")
        return None
    
    async def geocode_place(self, place_name: str) -> Optional[GeocodingResult]:
        """地名をジオコーディング（非同期版）"""
        return self.geocode_place_sync(place_name)
    
    def get_coverage_stats(self) -> Dict[str, int]:
        """カバレッジ統計取得"""
        return {
            'prefecture_count': len(self.prefecture_coordinates),
            'city_count': len(self.city_coordinates),
            'historical_count': len(self.historical_places),
            'total_places': len(self.prefecture_coordinates) + len(self.city_coordinates) + len(self.historical_places)
        } 