#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
ÊñáË±™„ÇÜ„Åã„ÇäÂú∞Âõ≥„Ç∑„Çπ„ÉÜ„É† v3.0 - Êú¨Áï™„Éá„Éº„ÇøÊäΩÂá∫ÂÆüË°å
‰∏ªË¶ÅÊñáË±™12Âêç„Éª30‰ΩúÂìÅ„Å´„Çà„ÇãÂ§ßË¶èÊ®°Âú∞ÂêçÊäΩÂá∫
"""

import time
import json
from datetime import datetime
from bungo_map.core.database import BungoDB
from bungo_map.extractors.aozora_extractor import AozoraExtractor
from bungo_map.extractors.ginza_place_extractor import GinzaPlaceExtractor
from bungo_map.extractors.simple_place_extractor import SimplePlaceExtractor


def main():
    """Êú¨Áï™ÂÆüË°å„É°„Ç§„É≥Èñ¢Êï∞"""
    print("üöÄ ÊñáË±™„ÇÜ„Åã„ÇäÂú∞Âõ≥„Ç∑„Çπ„ÉÜ„É† v3.0 - Êú¨Áï™ÂÆüË°åÈñãÂßã")
    print("=" * 80)
    
    start_time = time.time()
    
    # „Éá„Éº„Çø„Éô„Éº„Çπ„ÉªÊäΩÂá∫Âô®ÂàùÊúüÂåñ
    print("\nüìä 1. „Ç∑„Çπ„ÉÜ„É†ÂàùÊúüÂåñ")
    print("-" * 50)
    
    db = BungoDB()
    aozora_extractor = AozoraExtractor()
    ginza_extractor = GinzaPlaceExtractor() 
    simple_extractor = SimplePlaceExtractor()
    
    print("‚úÖ „Éá„Éº„Çø„Éô„Éº„ÇπÊé•Á∂öÂÆå‰∫Ü")
    print("‚úÖ ÈùíÁ©∫ÊñáÂ∫´ÊäΩÂá∫Âô®ÂàùÊúüÂåñÂÆå‰∫Ü")
    print("‚úÖ GiNZAÂú∞ÂêçÊäΩÂá∫Âô®ÂàùÊúüÂåñÂÆå‰∫Ü")
    print("‚úÖ Ê≠£Ë¶èË°®ÁèæÂú∞ÂêçÊäΩÂá∫Âô®ÂàùÊúüÂåñÂÆå‰∫Ü")
    
    # Êã°Âºµ‰ΩúÂìÅ„É™„Çπ„ÉàÂèñÂæó
    print("\nüìö 2. Êã°Âºµ‰ΩúÂìÅ„É™„Çπ„ÉàÂèñÂæó")
    print("-" * 50)
    
    works = aozora_extractor.get_extended_works()
    unique_authors = set(w['author_name'] for w in works)
    
    print(f"üìö ÂØæË±°‰ΩúÂìÅÊï∞: {len(works)}‰ΩúÂìÅ")
    print(f"üìù ÂØæË±°‰ΩúËÄÖÊï∞: {len(unique_authors)}Âêç")
    print()
    print("üìù ÂØæË±°‰ΩúËÄÖ‰∏ÄË¶ß:")
    for i, author in enumerate(sorted(unique_authors), 1):
        author_works_count = sum(1 for w in works if w['author_name'] == author)
        print(f"   {i:2d}. {author} ({author_works_count}‰ΩúÂìÅ)")
    print()
    
    # Áµ±Ë®àÂ§âÊï∞
    total_ginza = 0
    total_simple = 0
    total_saved = 0
    failed_works = []
    successful_works = []
    
    # ÂêÑ‰ΩúÂìÅ„ÇíÂá¶ÁêÜ
    print("üèûÔ∏è 3. Êú¨Áï™Âú∞ÂêçÊäΩÂá∫ÂÆüË°å")
    print("-" * 50)
    
    for idx, work_info in enumerate(works, 1):
        print(f"üìö [{idx:2d}/{len(works)}] {work_info['author_name']} - {work_info['title']}")
        
        try:
            # ‰ΩúËÄÖ„Éª‰ΩúÂìÅÁôªÈå≤
            author_id = db.upsert_author(work_info['author_name'])
            work_id = db.upsert_work(
                author_id=author_id, 
                title=work_info['title'], 
                wiki_url=work_info['text_url']
            )
            
            # „ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó
            print(f"   üì• „ÉÜ„Ç≠„Çπ„ÉàÂèñÂæó‰∏≠...")
            text = aozora_extractor.download_and_extract_text(work_info['text_url'])
            
            if not text:
                print("   ‚ùå „ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÂ§±Êïó")
                failed_works.append({
                    'title': work_info['title'],
                    'author': work_info['author_name'],
                    'error': '„ÉÜ„Ç≠„Çπ„ÉàÂèñÂæóÂ§±Êïó'
                })
                continue
            
            text_length = len(text)
            print(f"   üìÑ „ÉÜ„Ç≠„Çπ„ÉàÈï∑: {text_length:,}ÊñáÂ≠ó")
            
            # „ÉÜ„Ç≠„Çπ„Éà„Çµ„Ç§„Ç∫„Å´Âøú„Åò„Å¶GiNZAÂá¶ÁêÜÁØÑÂõ≤„ÇíË™øÊï¥
            if text_length > 100000:  # 100KBË∂Ö„ÅÆÂ†¥Âêà
                ginza_text = text[:50000]  # GiNZA„ÅØ50KB„Åæ„Åß
                print(f"   üî¨ GiNZAÂá¶ÁêÜÁØÑÂõ≤: {len(ginza_text):,}ÊñáÂ≠ó (Âà∂ÈôêÈÅ©Áî®)")
            else:
                ginza_text = text
                print(f"   üî¨ GiNZAÂá¶ÁêÜÁØÑÂõ≤: {len(ginza_text):,}ÊñáÂ≠ó (ÂÖ®Êñá)")
            
            # Âú∞ÂêçÊäΩÂá∫ÂÆüË°å
            print(f"   üîç Âú∞ÂêçÊäΩÂá∫ÂÆüË°å‰∏≠...")
            
            # GiNZAÂú∞ÂêçÊäΩÂá∫
            ginza_places = ginza_extractor.extract_places_from_text(
                work_id=work_id, 
                text=ginza_text, 
                aozora_url=work_info['text_url']
            )
            
            # Ê≠£Ë¶èË°®ÁèæÂú∞ÂêçÊäΩÂá∫ÔºàÂÖ®„ÉÜ„Ç≠„Çπ„ÉàÔºâ
            simple_places = simple_extractor.extract_places_from_text(
                work_id=work_id, 
                text=text,
                aozora_url=work_info['text_url']
            )
            
            ginza_count = len(ginza_places)
            simple_count = len(simple_places)
            
            print(f"   üî¨ GiNZAÊäΩÂá∫: {ginza_count:2d}ÂÄã")
            print(f"   üìù Ê≠£Ë¶èË°®ÁèæÊäΩÂá∫: {simple_count:2d}ÂÄã")
            
            # „Éá„Éº„Çø„Éô„Éº„Çπ‰øùÂ≠ò
            ginza_saved = 0
            simple_saved = 0
            
            # GiNZAÂú∞Âêç„Çí‰øùÂ≠ò
            for place in ginza_places:
                try:
                    db.upsert_place(
                        work_id=work_id,
                        place_name=place.place_name,
                        before_text=place.before_text,
                        sentence=place.sentence,
                        after_text=place.after_text,
                        aozora_url=place.aozora_url,
                        extraction_method=place.extraction_method,
                        confidence=place.confidence
                    )
                    ginza_saved += 1
                except Exception as e:
                    print(f"     ‚ö†Ô∏è GiNZAÂú∞Âêç‰øùÂ≠ò„Ç®„É©„Éº: {place.place_name}")
            
            # Ê≠£Ë¶èË°®ÁèæÂú∞Âêç„Çí‰øùÂ≠ò
            for place in simple_places:
                try:
                    db.upsert_place(
                        work_id=work_id,
                        place_name=place.place_name,
                        before_text=place.before_text,
                        sentence=place.sentence,
                        after_text=place.after_text,
                        aozora_url=place.aozora_url,
                        extraction_method=place.extraction_method,
                        confidence=place.confidence
                    )
                    simple_saved += 1
                except Exception as e:
                    print(f"     ‚ö†Ô∏è Ê≠£Ë¶èË°®ÁèæÂú∞Âêç‰øùÂ≠ò„Ç®„É©„Éº: {place.place_name}")
            
            work_total_saved = ginza_saved + simple_saved
            print(f"   üíæ DB‰øùÂ≠ò: {work_total_saved:2d}ÂÄã (GiNZA: {ginza_saved}, Ê≠£Ë¶èË°®Áèæ: {simple_saved})")
            
            # Áµ±Ë®àÊõ¥Êñ∞
            total_ginza += ginza_saved
            total_simple += simple_saved
            total_saved += work_total_saved
            
            successful_works.append({
                'title': work_info['title'],
                'author': work_info['author_name'],
                'text_length': text_length,
                'ginza_places': ginza_saved,
                'simple_places': simple_saved,
                'total_places': work_total_saved
            })
            
            # ÈÄ≤ÊçóË°®Á§∫
            if idx % 5 == 0:
                elapsed = time.time() - start_time
                remaining_estimate = (elapsed / idx) * (len(works) - idx)
                print(f"   üìä ÈÄ≤Êçó: {idx}/{len(works)} ({idx/len(works)*100:.1f}%)")
                print(f"   ‚è±Ô∏è ÁµåÈÅé: {elapsed:.1f}Áßí, ÊÆã„Çä‰∫àÊÉ≥: {remaining_estimate:.1f}Áßí")
            
            print()
            
        except Exception as e:
            print(f"   ‚ùå ‰ΩúÂìÅÂá¶ÁêÜ„Ç®„É©„Éº: {e}")
            failed_works.append({
                'title': work_info['title'],
                'author': work_info['author_name'],
                'error': str(e)
            })
            print()
            continue
    
    # ÊúÄÁµÇÁµêÊûú
    end_time = time.time()
    execution_time = end_time - start_time
    
    print("üéØ 4. Êú¨Áï™ÂÆüË°åÁµêÊûú„Çµ„Éû„É™„Éº")
    print("=" * 80)
    
    # „Éá„Éº„Çø„Éô„Éº„ÇπÊúÄÁµÇÁä∂Ê≥Å
    authors_count = db.get_authors_count()
    works_count = db.get_works_count()
    places_count = db.get_places_count()
    
    success_rate = (len(successful_works) / len(works)) * 100
    
    print(f"üìä ÊúÄÁµÇ„Éá„Éº„Çø„Éô„Éº„ÇπÁä∂Ê≥Å:")
    print(f"   üìö ‰ΩúËÄÖ: {authors_count:2d}‰ª∂")
    print(f"   üìñ ‰ΩúÂìÅ: {works_count:2d}‰ª∂")
    print(f"   üèûÔ∏è Âú∞Âêç: {places_count:3d}‰ª∂")
    print(f"   ‚è±Ô∏è ÂÆüË°åÊôÇÈñì: {execution_time:.1f}Áßí")
    print()
    
    print(f"üìà ÊäΩÂá∫Ë©≥Á¥∞Áµ±Ë®à:")
    print(f"   üî¨ GiNZAÁ∑èÊäΩÂá∫: {total_ginza:3d}‰ª∂")
    print(f"   üìù Ê≠£Ë¶èË°®ÁèæÁ∑èÊäΩÂá∫: {total_simple:3d}‰ª∂")
    print(f"   üíæ Á∑è‰øùÂ≠ò‰ª∂Êï∞: {total_saved:3d}‰ª∂")
    print(f"   üìä ÊàêÂäüÁéá: {success_rate:.1f}% ({len(successful_works)}/{len(works)})")
    print()
    
    # ÊàêÂäü„ÉªÂ§±Êïó‰ΩúÂìÅ„ÅÆË©≥Á¥∞
    if successful_works:
        print(f"‚úÖ ÊàêÂäü‰ΩúÂìÅ ({len(successful_works)}‰ª∂):")
        for work in successful_works[:10]:  # ‰∏ä‰Ωç10‰ª∂Ë°®Á§∫
            print(f"   ‚Ä¢ {work['title']} / {work['author']} - {work['total_places']}Âú∞Âêç")
        if len(successful_works) > 10:
            print(f"   ... ‰ªñ{len(successful_works) - 10}‰ª∂")
        print()
    
    if failed_works:
        print(f"‚ùå Â§±Êïó‰ΩúÂìÅ ({len(failed_works)}‰ª∂):")
        for work in failed_works:
            print(f"   ‚Ä¢ {work['title']} / {work['author']} - {work['error']}")
        print()
    
    # Áµ±Ë®à„Éá„Éº„Çø„ÇíJSON„Åß‰øùÂ≠ò
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    stats = {
        "execution_info": {
            "execution_date": datetime.now().isoformat(),
            "execution_time_seconds": round(execution_time, 2),
            "version": "v3.0 Production"
        },
        "database_stats": {
            "total_authors": authors_count,
            "total_works": works_count,
            "total_places": places_count
        },
        "extraction_stats": {
            "ginza_extractions": total_ginza,
            "regex_extractions": total_simple,
            "total_saved": total_saved,
            "success_rate": round(success_rate, 2)
        },
        "successful_works": successful_works,
        "failed_works": failed_works
    }
    
    # Âá∫Âäõ„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅÆÁ¢∫Ë™ç
    import os
    os.makedirs("output", exist_ok=True)
    
    with open(f"output/production_stats_{timestamp}.json", "w", encoding="utf-8") as f:
        json.dump(stats, f, ensure_ascii=False, indent=2)
    
    print(f"üìÑ Ë©≥Á¥∞Áµ±Ë®à„Éá„Éº„Çø: output/production_stats_{timestamp}.json")
    print()
    
    # Âú∞ÂêçÊäΩÂá∫ÁµêÊûú„ÅÆ„Çµ„É≥„Éó„É´Ë°®Á§∫
    print(f"üìç ÊúÄÊñ∞ÊäΩÂá∫Âú∞Âêç„Çµ„É≥„Éó„É´ (20‰ª∂):")
    print("-" * 60)
    
    recent_places = db.get_recent_places(limit=20)
    for i, place in enumerate(recent_places, 1):
        method_short = place['extraction_method'][:6]
        print(f"{i:2d}. {place['place_name']} ({method_short}) - ‰ø°È†ºÂ∫¶: {place['confidence']:.2f}")
        print(f"    üìö {place['work_title']} / üìù {place['author_name']}")
        print(f"    üí¨ {place['sentence'][:45]}...")
        print()
    
    print(f"üéâ ÊñáË±™„ÇÜ„Åã„ÇäÂú∞Âõ≥„Ç∑„Çπ„ÉÜ„É† v3.0 Êú¨Áï™ÂÆüË°åÂÆå‰∫ÜÔºÅ")
    print("=" * 80)


if __name__ == "__main__":
    main() 